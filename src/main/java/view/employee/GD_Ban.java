/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.employee;

import LIB.FadeEffect;
import com.formdev.flatlaf.FlatIntelliJLaf;

import javax.swing.JFrame;

import component.BanItem;
import component.MessageMoveTable;
import component.MessageOrderConfirm;
import component.MyButton;
import component.ScrollBarCustom;
import component.WrapLayout;
import dao.IBanDAO;
import dao.IHoaDonDAO;
import dao.imlp.BanDAO;
import dao.imlp.HoaDonDAO;
import entity.Ban;
import entity.HoaDon;
import entity.NhanVien;
import icon.FontAwesome;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.time.Duration;
import java.time.LocalDateTime;
import javax.swing.JButton;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.SwingWorker;

import jiconfont.swing.IconFontSwing;
import raven.toast.Notifications;
import utils.AppUtils;

import static utils.AppUtils.*;

/**
 * @author dmx
 */
public class GD_Ban extends javax.swing.JPanel {

    /**
     * Creates new form GD_Ban
     */
    private JPanel main;
    private String type;
    private IBanDAO banDAO = new BanDAO();
    private List<JButton> floors = new ArrayList<>();
    private NhanVien nv;
    private Ban ban;
    private IHoaDonDAO hoaDonDAO = new HoaDonDAO();
    private JFrame jFrameForm;
    private GD_DatMon gd_Datmon; //sử dụng để khi back từ món về vô lại nhanh
    private HoaDon hoaDon;
    private List<BanItem> banItems = new ArrayList<>();
    private List<BanItem> listBanItem = new ArrayList<>();

    //    NDK: Them phieu dat ban de chuyen ban
//    NDK: Bi do GD_DatBan, DatMon, QuanLyDatMon, TrangChu
    public GD_Ban(JPanel main, String type) {
        this.type = type;
        this.main = main;
        this.nv = AppUtils.NHANVIEN;
        initComponents();
        IconFontSwing.register(FontAwesome.getIconFont());
        tabLabel.setIcon(IconFontSwing.buildIcon(FontAwesome.CHEVRON_RIGHT, 20, Color.WHITE));
        ScrollListBan.setVerticalScrollBar(new ScrollBarCustom());
        ScrollListBan.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        ListBan.setLayout(new WrapLayout(FlowLayout.LEADING, 40, 40));
        containerFloors.setLayout(new WrapLayout(FlowLayout.LEADING, 0, 0));
        containerFloors.setPreferredSize(new Dimension(200, containerFloors.getHeight()));
        loadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        infoPanel = new component.PanelRound();
        RightInfo = new component.PanelRound();
        panelRound6 = new component.PanelRound();
        panelRound8 = new component.PanelRound();
        panelRound1 = new component.PanelRound();
        panelRound2 = new component.PanelRound();
        panelRound3 = new component.PanelRound();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        LeftInfo = new component.PanelRound();
        jLabel4 = new javax.swing.JLabel();
        GheTrongNhaHang = new javax.swing.JLabel();
        tabLabel = new javax.swing.JLabel();
        GheTrongTang = new javax.swing.JLabel();
        contentPanel = new component.PanelRound();
        containerFloors = new component.PanelRound();
        panelRound5 = new component.PanelRound();
        ScrollListBan = new javax.swing.JScrollPane();
        ListBan = new javax.swing.JPanel();

        infoPanel.setBackground(new java.awt.Color(31, 29, 43));
        infoPanel.setRoundBottomLeft(20);
        infoPanel.setRoundBottomRight(20);
        infoPanel.setRoundTopLeft(20);
        infoPanel.setRoundTopRight(20);

        RightInfo.setBackground(new java.awt.Color(31, 29, 43));

        panelRound6.setBackground(new java.awt.Color(231, 124, 59));
        panelRound6.setPreferredSize(new java.awt.Dimension(30, 30));

        panelRound8.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout panelRound8Layout = new javax.swing.GroupLayout(panelRound8);
        panelRound8.setLayout(panelRound8Layout);
        panelRound8Layout.setHorizontalGroup(
                panelRound8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 16, Short.MAX_VALUE)
        );
        panelRound8Layout.setVerticalGroup(
                panelRound8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 36, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelRound6Layout = new javax.swing.GroupLayout(panelRound6);
        panelRound6.setLayout(panelRound6Layout);
        panelRound6Layout.setHorizontalGroup(
                panelRound6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelRound6Layout.createSequentialGroup()
                                .addGap(0, 14, Short.MAX_VALUE)
                                .addComponent(panelRound8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelRound6Layout.setVerticalGroup(
                panelRound6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelRound8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        panelRound1.setBackground(new java.awt.Color(68, 151, 247));
        panelRound1.setPreferredSize(new java.awt.Dimension(30, 30));

        javax.swing.GroupLayout panelRound1Layout = new javax.swing.GroupLayout(panelRound1);
        panelRound1.setLayout(panelRound1Layout);
        panelRound1Layout.setHorizontalGroup(
                panelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 30, Short.MAX_VALUE)
        );
        panelRound1Layout.setVerticalGroup(
                panelRound1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        panelRound2.setBackground(new java.awt.Color(231, 124, 59));
        panelRound2.setPreferredSize(new java.awt.Dimension(30, 30));

        javax.swing.GroupLayout panelRound2Layout = new javax.swing.GroupLayout(panelRound2);
        panelRound2.setLayout(panelRound2Layout);
        panelRound2Layout.setHorizontalGroup(
                panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 30, Short.MAX_VALUE)
        );
        panelRound2Layout.setVerticalGroup(
                panelRound2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        panelRound3.setBackground(new java.awt.Color(204, 204, 204));
        panelRound3.setPreferredSize(new java.awt.Dimension(30, 30));

        javax.swing.GroupLayout panelRound3Layout = new javax.swing.GroupLayout(panelRound3);
        panelRound3.setLayout(panelRound3Layout);
        panelRound3Layout.setHorizontalGroup(
                panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 30, Short.MAX_VALUE)
        );
        panelRound3Layout.setVerticalGroup(
                panelRound3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setFont(utils.AppUtils.getFont(14f, _BOLD_));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Bàn Trống");

        jLabel2.setFont(utils.AppUtils.getFont(14f, _BOLD_));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Bàn Đang phục vụ");

        jLabel3.setFont(utils.AppUtils.getFont(14f, _BOLD_));
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Bàn Đặt Trước");

        jLabel5.setFont(utils.AppUtils.getFont(14f, _BOLD_));
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Bàn Đang phục vụ/Đặt Trước");

        javax.swing.GroupLayout RightInfoLayout = new javax.swing.GroupLayout(RightInfo);
        RightInfo.setLayout(RightInfoLayout);
        RightInfoLayout.setHorizontalGroup(
                RightInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(RightInfoLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(panelRound1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                                .addGap(20, 20, 20)
                                .addComponent(panelRound2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(20, 20, 20)
                                .addComponent(panelRound3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(20, 20, 20)
                                .addComponent(panelRound6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(20, 20, 20))
        );
        RightInfoLayout.setVerticalGroup(
                RightInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(RightInfoLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(RightInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(panelRound6, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                                        .addComponent(panelRound3, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                                        .addComponent(panelRound2, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                                        .addComponent(panelRound1, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(17, 17, 17))
        );

        LeftInfo.setBackground(new java.awt.Color(31, 29, 43));

        jLabel4.setFont(utils.AppUtils.getFont(14f, _BOLD_));
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Toàn Bộ Nhà Hàng:");

        GheTrongNhaHang.setFont(utils.AppUtils.getFont(14f, _ITALIC_));
        GheTrongNhaHang.setForeground(new java.awt.Color(255, 255, 255));
        GheTrongNhaHang.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        GheTrongNhaHang.setText("Trống 20/40 - 300 ghế");
        GheTrongNhaHang.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        GheTrongTang.setFont(utils.AppUtils.getFont(14f, _ITALIC_));
        GheTrongTang.setForeground(new java.awt.Color(255, 255, 255));
        GheTrongTang.setText("Tầng 1: Trống 9/12 bàn - 54 ghế");

        javax.swing.GroupLayout LeftInfoLayout = new javax.swing.GroupLayout(LeftInfo);
        LeftInfo.setLayout(LeftInfoLayout);
        LeftInfoLayout.setHorizontalGroup(
                LeftInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(LeftInfoLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel4)
                                .addGap(10, 10, 10)
                                .addComponent(GheTrongNhaHang, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tabLabel)
                                .addGap(20, 20, 20)
                                .addComponent(GheTrongTang)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        LeftInfoLayout.setVerticalGroup(
                LeftInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(LeftInfoLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(LeftInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(GheTrongNhaHang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(tabLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(GheTrongTang, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
                infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoPanelLayout.createSequentialGroup()
                                .addComponent(LeftInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RightInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        infoPanelLayout.setVerticalGroup(
                infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(RightInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LeftInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        contentPanel.setBackground(new java.awt.Color(83, 86, 99));

        containerFloors.setBackground(new java.awt.Color(83, 86, 99));
        containerFloors.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.lightGray, null, null));

        javax.swing.GroupLayout containerFloorsLayout = new javax.swing.GroupLayout(containerFloors);
        containerFloors.setLayout(containerFloorsLayout);
        containerFloorsLayout.setHorizontalGroup(
                containerFloorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 185, Short.MAX_VALUE)
        );
        containerFloorsLayout.setVerticalGroup(
                containerFloorsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 0, Short.MAX_VALUE)
        );

        panelRound5.setBackground(new java.awt.Color(83, 86, 99));
        panelRound5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray, java.awt.Color.lightGray));

        ListBan.setBackground(new java.awt.Color(83, 86, 99));

        javax.swing.GroupLayout ListBanLayout = new javax.swing.GroupLayout(ListBan);
        ListBan.setLayout(ListBanLayout);
        ListBanLayout.setHorizontalGroup(
                ListBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 1472, Short.MAX_VALUE)
        );
        ListBanLayout.setVerticalGroup(
                ListBanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 580, Short.MAX_VALUE)
        );

        ScrollListBan.setViewportView(ListBan);

        javax.swing.GroupLayout panelRound5Layout = new javax.swing.GroupLayout(panelRound5);
        panelRound5.setLayout(panelRound5Layout);
        panelRound5Layout.setHorizontalGroup(
                panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ScrollListBan, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        panelRound5Layout.setVerticalGroup(
                panelRound5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ScrollListBan)
        );

        javax.swing.GroupLayout contentPanelLayout = new javax.swing.GroupLayout(contentPanel);
        contentPanel.setLayout(contentPanelLayout);
        contentPanelLayout.setHorizontalGroup(
                contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contentPanelLayout.createSequentialGroup()
                                .addComponent(containerFloors, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(panelRound5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        contentPanelLayout.setVerticalGroup(
                contentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(containerFloors, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(panelRound5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void myButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myButton2ActionPerformed
        // TODO add your handling code here:
        ListBan.repaint();
        ListBan.revalidate();
    }//GEN-LAST:event_myButton2ActionPerformed

    private void myButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_myButton3ActionPerformed

    private void myButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_myButton4ActionPerformed

    private void myButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_myButton5ActionPerformed

    private void btnBanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBanActionPerformed

    private void loadTables(int floor) {
        List<Ban> bans = banDAO.findByFloor(floor);
        List<Ban> dsBanTrong = banDAO.findTableByStateAndFloor(utils.Enum.LoaiTrangThai.BAN_TRONG, floor);
        int quantityOfChair = 0;
        for (Ban ban : dsBanTrong) {
            quantityOfChair += ban.getSoGhe();
        }
        GheTrongTang.setText("Tầng " + floor + ": Trống " + dsBanTrong.size() + "/" + bans.size() + " bàn - " + quantityOfChair + " ghế");
        ListBan.removeAll();
        String maBanGop = this.ban != null ? this.ban.getMaBan() : "";
        for (Ban ban : bans) {
            BanItem banItem = new BanItem(ban, ban.getTrangThai().ordinal(), main, type);
            banItem.setGDBan(this);
            if (maBanGop.equals(ban.getBanGop() == null ? ban.getMaBan() : ban.getBanGop().getMaBan())) {
                banItem.setActive();
                if (type.equals("CHUYEN_BAN")) {
                    setBanActive(ban);
                }
            }
            listBanItem.add(banItem);
            ListBan.add(banItem);
        }
        ListBan.repaint();
        ListBan.revalidate();
    }

    private void loadFloors() {
        List<Object[]> floors = banDAO.groupByMaTang();
        for (Object[] floor : floors) {
            JButton button = createButtonFloor(Integer.parseInt(floor[0] + ""), Integer.parseInt(floor[1] + ""));
            containerFloors.add(button);
            this.floors.add(button);
        }
        containerFloors.repaint();
        containerFloors.revalidate();
    }

    private MyButton createButtonFloor(int floor, int quantity) {
        String text = "Tầng " + floor + " (" + quantity + ")";
        MyButton button = new MyButton();
        button.setRadius(20);
        button.setColor(new Color(31, 29, 43));
        button.setBackground(new Color(31, 29, 43));
        button.setColorClick(new Color(234, 124, 105));
        button.setColorOver(new Color(234, 124, 105));
        button.setPreferredSize(new Dimension(200, 60));
        button.setFont(new Font("", Font.BOLD, 16));
        button.setForeground(Color.WHITE);
        button.setText(text);
        button.addActionListener(e -> {
            loadTables(floor);
            setActive(e);
        });
        return button;
    }

    public void showMessage(String message) {
        Notifications.getInstance().show(Notifications.Type.SUCCESS, Notifications.Location.TOP_RIGHT, 1500, message);
    }

    private void setActive(ActionEvent e) {
        Color transparent = new Color(31, 29, 43);
        Color activeColor = new Color(234, 124, 105);
        for (JButton button : this.floors) {
            boolean isButton = ((JButton) e.getSource()).getText().equals(button.getText());
            ((MyButton) button).setColor(isButton ? activeColor : transparent);
        }
    }

    private void loadEmptyTableOfRestaurant() {
        List<Ban> dsBan = banDAO.findAll(Ban.class);
        List<Ban> dsBanTrong = banDAO.findTableByState(utils.Enum.LoaiTrangThai.BAN_TRONG);
        int quantityOfChair = 0;
        for (Ban ban : dsBanTrong) {
            quantityOfChair += ban.getSoGhe();
        }
        GheTrongNhaHang.setText("Trống " + dsBanTrong.size() + "/" + dsBan.size() + " - " + quantityOfChair + " ghế");
    }

    private void setInitActive(JButton button) {
        ActionEvent fakeEvent = new ActionEvent(button, ActionEvent.ACTION_PERFORMED, "");
        setActive(fakeEvent);
    }

    private void loadData() {
        GD_Ban gd_ban = this;
        SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                // Thực hiện công việc lâu dài ở đây
                loadFloors();
                loadTables(1);
                setInitActive(gd_ban.floors.get(0));
                loadEmptyTableOfRestaurant();
                return null;
            }

            @Override
            protected void done() {
            }
        };
        worker.execute();
    }

    private void setBanActive(Ban ban) {
        this.ban = ban;
    }

    public Ban getBanActive() {
        return this.ban;
    }

    //chuyenban : mat phieu dat roi
    public void moveTable(Ban ban) {
        hoaDonDAO.updateBanById(hoaDon.getMaHoaDon(), ban);
        banDAO.updateStateById(ban.getMaBan(), this.ban.getTrangThai());
        banDAO.updateStateById(this.ban.getMaBan(), ban.getTrangThai());
        List<String> oldBanGops = new ArrayList<>();
        if (ban.getOldBanGop() != null) {
            oldBanGops = new ArrayList<>(Arrays.asList(this.ban.getOldBanGop().split(",")));
        }
        if (oldBanGops.size() == 1) {
            this.ban.setOldBanGop(null);
            this.ban.setOldState(null);
            banDAO.update(this.ban);
        }
    }

    public void setHoaDon(HoaDon hoaDon) {
        this.hoaDon = hoaDon;
        this.ban = hoaDon.getBan();
    }

    public void setFormDatBan(Ban ban) {
        if (jFrameForm == null || !jFrameForm.isVisible()) {
            jFrameForm = new JFrame();
            jFrameForm.setUndecorated(true);
            jFrameForm.setExtendedState(JFrame.MAXIMIZED_BOTH);
            jFrameForm.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            Form_DatBan form_DatBan = new Form_DatBan(jFrameForm, ban);
            form_DatBan.setMainJpanel(main);
            form_DatBan.setGD_ban(this);
            jFrameForm.add(form_DatBan);
            jFrameForm.setBackground(new Color(0, 0, 0, 0));
            FadeEffect.fadeInFrame(jFrameForm, 8, 0.1f);
            jFrameForm.setVisible(true);
        } else {
            jFrameForm.toFront();
        }
    }

    public void setFormMessageMoveTable(BanItem banItem) {
        if (jFrameForm == null || !jFrameForm.isVisible()) {
            jFrameForm = new JFrame();
            jFrameForm.setUndecorated(true);
            jFrameForm.setExtendedState(JFrame.MAXIMIZED_BOTH);
            jFrameForm.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            MessageMoveTable message = new MessageMoveTable(jFrameForm, banItem);
            message.setBranch("DAT_TAI_CHO");
            jFrameForm.add(message);
            jFrameForm.setBackground(new Color(0, 0, 0, 0));
            FadeEffect.fadeInFrame(jFrameForm, 8, 0.1f);
            jFrameForm.setVisible(true);
        } else {
            jFrameForm.toFront();
        }
    }

    public void setFormMessageOrderConfirm(BanItem banItem) {
        if (jFrameForm == null || !jFrameForm.isVisible()) {
            jFrameForm = new JFrame();
            jFrameForm.setUndecorated(true);
            jFrameForm.setExtendedState(JFrame.MAXIMIZED_BOTH);
            jFrameForm.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            jFrameForm.setAlwaysOnTop(true);
            MessageOrderConfirm message = new MessageOrderConfirm(jFrameForm, banItem);
            jFrameForm.add(message);
            jFrameForm.setBackground(new Color(0, 0, 0, 0));
            FadeEffect.fadeInFrame(jFrameForm, 8, 0.1f);
            jFrameForm.setVisible(true);
        } else {
            jFrameForm.toFront();
        }
    }

    private List<HoaDon> getListHoaDon(Ban ban) {
        List<HoaDon> results = new ArrayList<>();
        List<String> oldBanGops = ban.getOldBanGop() != null ? new ArrayList<>(Arrays.asList(ban.getOldBanGop().split(","))) : new ArrayList<>();
        if (ban.getBanGop() != null) {
            oldBanGops.add(ban.getBanGop().getMaBan());
        }
        for (String old : oldBanGops) {
            hoaDonDAO.findByStateAndIdTable(utils.Enum.LoaiTrangThaiHoaDon.DAT_TRUOC, old).stream().forEach(hoaDon -> results.add((HoaDon) hoaDon));
        }
        if (oldBanGops.size() == 1) {
            hoaDonDAO.findByStateAndIdTable(utils.Enum.LoaiTrangThaiHoaDon.DAT_TRUOC, ban.getMaBan()).stream().forEach(hoaDon -> results.add((HoaDon) hoaDon));
        }
        return results;
    }

    public boolean checkTime(LocalDateTime from, LocalDateTime to) {
        Duration duration = Duration.between(from, to);
        long hours = duration.toHours();
        return Math.abs(hours) >= 8;
    }

    public boolean isTimeValidate(LocalDateTime from, Ban ban) {
        List<HoaDon> hoaDons = getListHoaDon(ban);
        for (HoaDon hoaDon : hoaDons) {
            if (!checkTime(from, hoaDon.getNgayDatBan())) {
                return false;
            }
        }
        return hoaDons.size() == 0 ? false : true;
    }

    public Ban getMainBan() {
        Ban mainBan = null;
        for (BanItem banItem : getBanItems()) {
            if (banItem.getBan().getBanGop() == null) {
                mainBan = banItem.getBan();
                break;
            }
        }
        if (mainBan == null) {
            mainBan = getBanItems().get(0).getBan();
        }
        return mainBan;
    }

    public void order() {
        Ban mainBan = getMainBan();
        for (BanItem banItem : getBanItems()) {
            Ban ban = banItem.getBan();
            mergeTable(ban, mainBan);
            banDAO.update(ban);
        }
    }

    private void mergeTable(Ban ban, Ban mainBan) {
        String oldBanGop = ban.getOldBanGop() == null ? "" : ban.getOldBanGop();
        oldBanGop = !oldBanGop.endsWith(",") ? oldBanGop + "," : oldBanGop;
        oldBanGop += ban.getBanGop() != null ? ban.getBanGop().getMaBan() + "," : null + ",";
        ban.setBanGop(getBanItems().size() > 1 ? mainBan : null);
        ban.setOldBanGop(oldBanGop);
        String oldState = null;
        if (oldBanGop != null) {
            oldState = ban.getOldState() == null ? "" : ban.getOldState();
            oldState = !oldState.endsWith(",") ? oldState + "," : oldState;
            oldState += ban.getTrangThai().ordinal() + ",";
        }
        ban.setOldState(oldState);
        if (ban.getTrangThai().equals(utils.Enum.LoaiTrangThai.BAN_DA_DUOC_DAT)) {
            ban.setTrangThai(utils.Enum.LoaiTrangThai.KHAC);
        } else if (ban.getTrangThai().equals(utils.Enum.LoaiTrangThai.BAN_TRONG)) {
            ban.setTrangThai(utils.Enum.LoaiTrangThai.BAN_CO_KHACH);
        }
    }

    private void mergeTableNotEmpty(Ban ban, String maHD) {
        if (!ban.getOldBanGop().contains("HD")) {
            String oldBanGop = ban.getOldBanGop() == null ? "" : ban.getOldBanGop();
            oldBanGop += ban.getBanGop() != null ? maHD + "-" + ban.getBanGop().getMaBan() + "," : maHD + "-" + ban.getMaBan() + ",";
            ban.setOldBanGop(oldBanGop);
            String oldState = null;
            if (oldBanGop != null) {
                oldState = ban.getOldState() == null ? "" : ban.getOldState();
                oldState += ban.getTrangThai().ordinal() + ",";
            }
            ban.setOldState(oldState);
        }
    }

    public void mergeInvoice() {
        String maBanGop = hoaDon.getBan().getMaBan();
        reloadTableMergeInvoice();
        Ban mainBan = hoaDon.getBan();
        String mHD = getHoaDonByBan(getBanItems().get(getBanItems().size() - 1).getBan()) != null ? getHoaDonByBan(getBanItems().get(getBanItems().size() - 1).getBan()).getMaHoaDon() : "";
        for (BanItem banItem : getBanItems()) {
            Ban ban = banItem.getBan();
            if (ban.getTrangThai().equals(utils.Enum.LoaiTrangThai.BAN_DA_DUOC_DAT) || ban.getTrangThai().equals(utils.Enum.LoaiTrangThai.BAN_TRONG)) {
                mergeTable(ban, mainBan);
            } else {
                mergeTableNotEmpty(ban, mHD);
                Ban banTemp = ban.getBanGop() != null ? ban.getBanGop() : ban;
                banTemp.getHoaDon().forEach(hoaDon -> {
                    if (hoaDon.getTrangThai().equals(utils.Enum.LoaiTrangThaiHoaDon.CHUA_THANH_TOAN)) {
                        hoaDon.setBan(mainBan);
                        hoaDonDAO.update(hoaDon);
                    }
                });
                if (ban.getBanGop() == null) {
                    ban.setBanGop(mainBan);
                } else {
                    List<Ban> listBanGop = banDAO.findByBanGop(ban.getBanGop());
                    listBanGop.forEach(banGop -> {
                        if (banGop.equals(ban)) {
                            banGop.setBanGop(mainBan);
                            banDAO.update(banGop);
                        }
                    });
                }
            }
            banDAO.update(ban);
        }
        this.hoaDon.setBan(mainBan);
        hoaDonDAO.update(hoaDon);
        List<HoaDon> orders = hoaDonDAO.findByState(utils.Enum.LoaiTrangThaiHoaDon.CHUA_THANH_TOAN);
        for (HoaDon order : orders) {
            if (order.getBan().getMaBan().equals(maBanGop)) {
                order.setBan(mainBan);
                hoaDonDAO.update(order);
            }
        }
    }

    private HoaDon getHoaDonByBan(Ban ban) {
        List<HoaDon> listHoaDon = hoaDonDAO.findByState(utils.Enum.LoaiTrangThaiHoaDon.CHUA_THANH_TOAN);
        for (HoaDon hoaDon : listHoaDon) {
            if (hoaDon.getBan().getMaBan().equals(ban.getBanGop() != null ? ban.getBanGop().getMaBan() : ban.getMaBan())) {
                return hoaDon;
            }
        }
        return null;
    }

    private void reloadTableMergeInvoice() {
        List<Ban> bans = banDAO.findAll(Ban.class);
        String maBanGop = hoaDon.getBan().getMaBan();
        bans.forEach(ban -> {
            if (ban.getBanGop() != null) {
                if (ban.getBanGop().getMaBan().equals(maBanGop)) {
                    updateBanAfterMerge(ban);
                }
            }
        });
    }

    private void updateBanAfterMerge(Ban ban) {
        List<String> oldBanGops = new ArrayList<>();
        List<Integer> oldState = new ArrayList<>();
        if (ban.getOldBanGop() != null) {
            oldBanGops = new ArrayList<>(Arrays.asList(ban.getOldBanGop().split(",")));
            oldState = new ArrayList<>();
            String[] oldStateStrings = ban.getOldState().split(",");
            for (String stateString : oldStateStrings) {
                oldState.add(Integer.parseInt(stateString));
            }
        }
        if (oldBanGops.size() == 0) {
            ban.setBanGop(null);
            ban.setTrangThai(utils.Enum.LoaiTrangThai.BAN_TRONG);
        } else if (oldBanGops.size() > 0) {
            String lastItem = oldBanGops.get(oldBanGops.size() - 1);
            ban.setBanGop((Ban) banDAO.findById(lastItem, Ban.class));
            ban.setTrangThai(utils.Enum.LoaiTrangThai.values()[oldState.get(oldState.size() - 1)]);
            if (!ban.getOldBanGop().contains("HD")) {
                oldBanGops.remove(oldBanGops.size() - 1);
                oldState.remove(oldState.size() - 1);
                String oldBanGop = oldBanGops.size() > 0 ? String.join(",", oldBanGops) : null;
                String oldStateString = oldState.size() > 0 ? (oldState.stream()
                        .map(Object::toString)
                        .collect(Collectors.joining(",")))
                        : null;
                ban.setOldBanGop(oldBanGop);
                ban.setOldState(oldStateString);

            }
        }

        banDAO.update(ban);
    }

    public void updateBanGopByBan(Ban ban) {
        List<Ban> bans = banDAO.findByBanGop(ban.getBanGop());
        for (BanItem banItem : listBanItem) {
            if (bans.contains(banItem.getBan()) && !banItem.getBan().equals(ban)) {
                banItem.setSelected();
            }
        }
        ListBan.repaint();
        ListBan.revalidate();
    }

    public void addBanItem(BanItem banItem) {
        banItems.add(banItem);
    }

    public void removeBanItem(BanItem banItem) {
        banItems.remove(banItem);
    }

    public List<BanItem> getBanItems() {
        return this.banItems;
    }

    public GD_DatMon getGd_Datmon() {
        return gd_Datmon;
    }

    public void setGd_Datmon(GD_DatMon gd_Datmon) {
        this.gd_Datmon = gd_Datmon;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GheTrongNhaHang;
    private javax.swing.JLabel GheTrongTang;
    private component.PanelRound LeftInfo;
    private javax.swing.JPanel ListBan;
    private component.PanelRound RightInfo;
    private javax.swing.JScrollPane ScrollListBan;
    private component.PanelRound containerFloors;
    private component.PanelRound contentPanel;
    private component.PanelRound infoPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private component.PanelRound panelRound1;
    private component.PanelRound panelRound2;
    private component.PanelRound panelRound3;
    private component.PanelRound panelRound5;
    private component.PanelRound panelRound6;
    private component.PanelRound panelRound8;
    private javax.swing.JLabel tabLabel;
    // End of variables declaration//GEN-END:variables

}
